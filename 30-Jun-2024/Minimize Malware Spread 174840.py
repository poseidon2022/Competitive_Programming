# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        
        #list out the infected nodes and make them in your queue.
        #starting from those, infect nodes that are directly connected to the infected ones and proceed accordingly
        # 9 * 10 ** 5 aint that big

        connections = defaultdict(list)
        initial.sort()
        n = len(graph)
        for i in range(n):
            for j in range(n):
                if graph[i][j]:
                    connections[i].append(j)
                    connections[j].append(i)
        
        mine = set(initial)
        final = float('inf')
        ans = None
        for infected in initial:
            mine.remove(infected)
            visited = {node for node in mine}
            queue = deque([node for node in mine])
            count = 0
            while queue:
                cur = queue.popleft()
                for node in connections[cur]:
                    if node not in visited:
                        count += 1
                        queue.append(node)
                        visited.add(node)
                
            if count < final:
                final = count
                ans = infected
                
            mine.add(infected)

        return ans





        